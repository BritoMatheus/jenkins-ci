pipeline {
    agent any

    stages {
        
        // stage ('Build') {
        //     steps {
        //         dir('src\\Jenkins.CICD\\Jenkins.CICD') {
        //             bat 'dotnet build '
        //         }
        //     }
        // }

        // stage ('Test') {
        //     steps {
        //         dir('src\\Jenkins.CICD\\Jenkins.CICD.Test') {
        //             bat 'dotnet test --collect:"XPlat Code Coverage" --output .\\TestResults\\CodeCoverage.cobertura.xml --output-format cobertura'
        //             bat 'dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --output .\\TestResults\\CodeCoverage '
        //         }
        //     }
        // }

        stage ('Build + Test + Sonar analysis') {
            
            environment {
                scannerHome = tool "SONAR_SCANNER"
                serviceName = "JenkinsCICD"
                sonarToken = "e378f35eabd51a38ce106b64f5d4c70515b7431f"
                exclusions = "**/ClientApp/**"
                coverageResult = "Jenkins.CICD.Test\\TestResults\\**\\coverage.cobertura.xml"
                coverageReportPaths = ".\\sonarqubecoverage\\SonarQube.xml"
            }

            steps {
                withSonarQubeEnv('MyLocalSonar') {

                    dir('src\\Jenkins.CICD') {
                        bat "dotnet sonarscanner begin /k:${serviceName} /d:sonar.login=${sonarToken} /d:sonar.exclusions=${exclusions} /d:sonar.coverageReportPaths=${coverageReportPaths}"
                        bat "dotnet build"
                        bat 'dotnet test --collect:"XPlat Code Coverage"'
                        bat "reportgenerator \"-reports:*\\TestResults\\*\\coverage.cobertura.xml\" \"-targetdir:sonarqubecoverage\" \"-reporttypes:SonarQube\" "
                        bat "dotnet sonarscanner end /d:sonar.login=${sonarToken}"
                    }
                }
            }
        }

        // stage ('Quality Gate') {
        //     steps {
        //         sleep(5)
        //         timeout(time: 1, unit: 'MINUTES') {
        //             waitForQualityGate abortPipeline: true
        //         }
        //     }
        // }
        
        stage ('Fim') {
            steps {
                bat 'echo fim'
            }
        }
        
    }
}